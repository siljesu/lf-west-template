target C {
    coordination: decentralized,
}

reactor DistAlg(ownId:int(0), STP_offset:time(10 msec)) {
    preamble {=
        void findIndexSmallestValues(int* arr, int* closestArr, int n) {
            int min1 = arr[0];
            int pos1 = 0;
            int min2 = arr[1];
            int pos2 = 1;

            if (min2 < min1) {
                min1 = arr[1];
                pos1 = 1;
                min2 = arr[0];
                pos2 = 0;
            }
            for (int i = 2; i < n; i++) {
                if (arr[i] < min1) {
                    min2 = min1;
                    pos2 = pos1;
                    min1 = arr[i];
                    pos1 = i;
                } else if (arr[i] < min2) {
                    min2 = arr[i];
                    pos2 = i;
                }
            }
            closestArr[0] = pos1;
            closestArr[1] = pos2;
        }

        int localAction(int closestRelays[], int ownId) {
            if (ownId == closestRelays[0] || ownId == closestRelays[1]) {
                return 1;
            } else {
                return 0;
            }
        }

        int decideLocalAction(int* arr, int ownId, int numUnits) {
            int closestRelays[2];
            findIndexSmallestValues(arr, closestRelays, numUnits);
            return localAction(closestRelays, ownId);
        }
    =}

    output distributedDecision:int
    input voltageReportAIn:int
    input voltageReportBIn:int
    input voltageReportCIn:int
    input voltageReportDIn:int

    reaction(voltageReportAIn, voltageReportBIn, voltageReportCIn, voltageReportDIn) -> distributedDecision {=
        bool result = 1; // default open

        //debugging
        if (voltageReportAIn->is_present) {
            printf("Input from A was present.\n");
        } else {
            printf("Input from A was not present.\n");
        }

        if (voltageReportBIn->is_present) {
            printf("Input from B was present.\n");
        } else {
            printf("Input from B was not present.\n");
        }

        if (voltageReportCIn->is_present) {
            printf("Input from C was present.\n");
        } else {
            printf("Input from C was not present.\n");
        }

        if (voltageReportDIn->is_present) {
            printf("Input from D was present.\n");
        } else {
            printf("Input from D was not present.\n");
        }

        if (voltageReportAIn->is_present && voltageReportBIn->is_present && voltageReportCIn->is_present && voltageReportDIn->is_present) {
            int voltageReports[4] = {voltageReportAIn->value, voltageReportBIn->value, voltageReportCIn->value, voltageReportDIn->value};
            result = decideLocalAction(voltageReports, self->ownId, 4);
            lf_set(distributedDecision, result);
        }
    =} STP(0) {=
        printf("STP violation: Did not receive inputs in time, opening circuit as default.\n");
    =}
}

reactor CircuitStatus(STP_offset:time(0 msec)) {
    preamble {=
        void openCircuit() {
            // led turns on
        }

        void closeCircuit() {
            // led turns off
        }
    =}

    input distributedDecision:int
    input countdown:int
    logical action breakCircuit;
    state faultHandled:int;

    reaction(startup){=
    =}

    reaction(countdown) -> breakCircuit {=
        self->faultHandled = 0;
        lf_schedule(breakCircuit, MSEC(150));
    =} STP(0) {=
        printf("STP violation for countdown\n");
    =}

    reaction(breakCircuit) {=
        if (self->faultHandled){
            // This relay is not the closest to the fault
            printf("FAult already handled.\n");
        } else {
            printf("Opening circuit since 150 msec has passed.\n");
            openCircuit();
        }
    =} STP(0) {=
        printf("STP violation for breakcircuit.\n");
    =}

    reaction(distributedDecision) -> breakCircuit {=
        if (distributedDecision->value) {
            printf("Distributed decision decided to open this circuit.\n");
            openCircuit();
            self->faultHandled = 1;
        } else {
            printf("Distributed decision decided to close this circuit.\n");
            closeCircuit();
            self->faultHandled = 1;
        }
    =} STP(0) {=
        printf("STP violation for distributed decision.\n");
    =}
}

reactor VoltageSensor(id:int(0)) {

    preamble{=
        #define VOLTAGE_LIMIT 14000U

        // Voltage measurement timeseries
        int simMeas[4][14] ={{15000,15000,13100,15000,15000,15000,15000,15000,15000,15000,15000,15000,15000,15000,15000},
                            {15000,15000,11000,15000,15000,15000,15000,15000,15000,15000,15000,15000,15000,15000,15000},
                            {15000,15000,11200,15000,15000,15000,15000,15000,15000,15000,15000,15000,15000,15000,15000},
                            {15000,15000,12500,15000,15000,15000,15000,15000,15000,15000,15000,15000,15000,15000,15000}};

        int readSensor(int id, int count) {
            return simMeas[id][count];
        }
    =}

    timer t(1 sec, 50 msec);
    output[4] measOut:int
    output startCountdown:int
    state measCount:int(0)

    reaction(startup){=
    =}

    reaction(t) -> measOut, startCountdown {=

        // Read simulated measurement 
        int voltageMeasurement = readSensor(self->id, self->measCount);
        if (self->measCount == 13) {
            self->measCount = 0;
            lf_request_stop();
        } else {
            self->measCount++;
        }

        // Check if short circuit has occured on the line
        if (voltageMeasurement < VOLTAGE_LIMIT) {
            // A fault has occured, let other nodes know
            lf_set(startCountdown, 1);
            for (int i = 0; i < 4; i++) {
                lf_set(measOut[i], voltageMeasurement);
            }
        }
    =}
}

reactor RelayUnit(id:int(0), STP_offset:time(0 msec)) {
    output[4] voltageReportOut:int;
    input voltageReportAIn:int;
    input voltageReportBIn:int;
    input voltageReportCIn:int;
    input voltageReportDIn:int;

    circuitStatus = new CircuitStatus();
    voltageSensor = new VoltageSensor(id = id);
    distAlg = new DistAlg(ownId = id);

    voltageSensor.measOut -> voltageReportOut;
    voltageSensor.startCountdown -> circuitStatus.countdown;

    voltageReportAIn -> distAlg.voltageReportAIn;
    voltageReportBIn -> distAlg.voltageReportBIn;
    voltageReportCIn -> distAlg.voltageReportCIn;
    voltageReportDIn -> distAlg.voltageReportDIn;

    
    distAlg.distributedDecision -> circuitStatus.distributedDecision;

}

federated reactor at 192.0.2.2:15047 {
    unitA = new RelayUnit(id = 0);
    unitB = new RelayUnit(id = 1);
    unitC = new RelayUnit(id = 2);
    unitD = new RelayUnit(id = 3);

    unitA.voltageReportOut -> unitA.voltageReportAIn, 
                              unitB.voltageReportAIn, 
                              unitC.voltageReportAIn, 
                              unitD.voltageReportAIn after 15 msec;

    unitB.voltageReportOut -> unitA.voltageReportBIn, 
                              unitB.voltageReportBIn, 
                              unitC.voltageReportBIn, 
                              unitD.voltageReportBIn after 15 msec;

    unitC.voltageReportOut -> unitA.voltageReportCIn, 
                              unitB.voltageReportCIn, 
                              unitC.voltageReportCIn, 
                              unitD.voltageReportCIn after 15 msec;

    unitD.voltageReportOut -> unitA.voltageReportDIn, 
                              unitB.voltageReportDIn, 
                              unitC.voltageReportDIn, 
                              unitD.voltageReportDIn after 15 msec;
}
