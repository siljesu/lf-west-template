// This test checks that logical time is incremented an appropriate amount as a
// result of an invocation of the lf_schedule() function at runtime. It also
// performs various smoke tests of timing aligned reactions. The first instance
// has a period of 4 seconds, the second of 2 seconds, and the third (composite)
// or 1 second.
target C {
    platform: "Zephyr",
    threading: true,
    workers: 4,
    timeout: 10 sec,
    fast: true
}

reactor Reschedule(period: time(2 sec), message: string("Hello C")) {
    state count: int(0)
    state previous_time: time(0)
    timer t(1 sec, period)
    logical action a

    reaction(t) -> a {=
        printfcb("%s\n", self->message);
        lf_schedule(a, MSEC(200));
        // Print the current time.
        self->previous_time = lf_time_logical();
        time_t secs = self->previous_time/BILLION;
        printfcb("Current time is %lld\n", self->previous_time);
        printfcb("Which is %sPlus %lld nanoseconds.\n", ctime(&secs), self->previous_time % BILLION);
    =}

    reaction(a) {=
        (self->count)++;
        printfcb("***** action %d at time %lld\n", self->count, lf_time_logical());
        // Check the a_has_value variable.
        if (a->has_value) {
            printfcb("FAILURE: Expected a->has_value to be false, but it was true.\n");
            exit(2);
        }
        long long time = lf_time_logical();
        if (time - self->previous_time != 200000000ll) {
            printfcb("FAILURE: Expected 200ms of logical time to elapse but got %lld nanoseconds.\n",
                time - self->previous_time
            );
            exit(1);
        }
    =}
}

reactor Inside(
    period: time(1 sec),
    message: string("Composite default message.")
) {
    third_instance = new Reschedule(period = period, message = message)
}

main reactor HelloThreaded {
    first_instance = new Reschedule(
        period = 4 sec,
        message = "Hello from first_instance."
    )
    second_instance = new Reschedule(message = "Hello from second_instance.")
    composite_instance = new Inside(message = "Hello from composite_instance.")
}
